version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sirfa-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - FRONTEND_URL=http://localhost:5173
      - ALIBABA_ACCESS_KEY_ID=${ALIBABA_ACCESS_KEY_ID}
      - ALIBABA_ACCESS_KEY_SECRET=${ALIBABA_ACCESS_KEY_SECRET}
      - ALIBABA_ASR_APP_KEY=${ALIBABA_ASR_APP_KEY}
      - ALIBABA_TTS_APP_KEY=${ALIBABA_TTS_APP_KEY}
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - sirfa-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sirfa-frontend
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - sirfa-network

  # Production service (full application)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sirfa-app
    ports:
      - "3000:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - ALIBABA_ACCESS_KEY_ID=${ALIBABA_ACCESS_KEY_ID}
      - ALIBABA_ACCESS_KEY_SECRET=${ALIBABA_ACCESS_KEY_SECRET}
      - ALIBABA_ASR_APP_KEY=${ALIBABA_ASR_APP_KEY}
      - ALIBABA_TTS_APP_KEY=${ALIBABA_TTS_APP_KEY}
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
    networks:
      - sirfa-network
    healthcheck:
      test: ["CMD", "node", "backend/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: sirfa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - sirfa-network
    command: redis-server --appendonly yes
    profiles:
      - production
      - redis

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: sirfa-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - sirfa-network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production
      - nginx

networks:
  sirfa-network:
    driver: bridge

volumes:
  redis_data:
    driver: local